var helpers = require("../../../../../AppData/Roaming/nvm/v14.16.1/node_modules/parcel/node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MainView", ()=>MainView
);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _reactRouterDom = require("react-router-dom");
var _loginView = require("../login-view/login-view");
var _registrationView = require("../registration-view/registration-view");
var _movieCard = require("../movie-card/movie-card");
var _movieView = require("../movie-view/movie-view");
var _directorView = require("../director-view/director-view");
var _genreView = require("../genre-view/genre-view");
var _profileView = require("../profile-view/profile-view");
var _configJs = require("../../config.js");
var _configJsDefault = parcelHelpers.interopDefault(_configJs);
// import './main-view.scss'
var _container = require("react-bootstrap/Container");
var _containerDefault = parcelHelpers.interopDefault(_container);
var _row = require("react-bootstrap/Row");
var _rowDefault = parcelHelpers.interopDefault(_row);
var _col = require("react-bootstrap/Col");
var _colDefault = parcelHelpers.interopDefault(_col);
var _reactBootstrap = require("react-bootstrap");
var _button = require("react-bootstrap/Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _card = require("react-bootstrap/Card");
var _cardDefault = parcelHelpers.interopDefault(_card);
var _cardDeck = require("react-bootstrap/CardDeck");
var _cardDeckDefault = parcelHelpers.interopDefault(_cardDeck);
class MainView extends _reactDefault.default.Component {
    // Initial state is set to null
    constructor(){
        super();
        this.state = {
            movies: [],
            user: null
        };
    }
    getMovies(token) {
        _axiosDefault.default.get(`${_configJsDefault.default.API_URL}/movies`, {
            headers: {
                Authorization: `Bearer ${token}`
            }
        }).then((response)=>{
            // Assign the result to the state
            this.setState({
                movies: response.data
            });
        }).catch(function(error) {
            console.log(error);
        });
    }
    getUsers(token) {
        _axiosDefault.default.get(`${_configJsDefault.default.API_URL}/users`, {
            headers: {
                Authorization: `Bearer ${token}`
            }
        }).then((response)=>{
            // Assign the result to the state
            this.setState({
                users: response.data
            });
            console.log(response);
        }).catch(function(error) {
            console.log(error);
        });
    }
    componentDidMount() {
        let accessToken = localStorage.getItem('token');
        if (accessToken !== null) {
            this.setState({
                user: localStorage.getItem('user')
            });
            this.getMovies(accessToken);
        }
    }
    // // When a movie is clicked, this function is invoked and updates the state of the `selectedMovie` property to that movie
    // setSelectedMovie(movie) {
    //   this.setState({
    //     selectedMovie: movie
    //   });
    // }
    // a method passed as a prop
    // when a user successfully logs in, this function updates the `user` property in state to that particular user
    onLoggedIn(authData) {
        console.log(authData);
        this.setState({
            user: authData.user.Username
        });
        // stores logged in user and token - saved in user state
        localStorage.setItem('token', authData.token);
        localStorage.setItem('user', authData.user.Username);
        this.getMovies(authData.token);
        this.getUsers(authData.token);
    }
    onRegister(register) {
        console.log(register);
        this.setState({
            register
        });
    }
    onLoggedOut() {
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        this.setState({
            user: null
        });
    }
    render() {
        const { movies , user , history  } = this.state;
        return(/*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.BrowserRouter, {
            __source: {
                fileName: "C:\\Users\\Jordan\\Desktop\\myFlix_Client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 122
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement(_rowDefault.default, {
            className: "main-view justify-content-md-center",
            __source: {
                fileName: "C:\\Users\\Jordan\\Desktop\\myFlix_Client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 123
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement(_containerDefault.default, {
            __source: {
                fileName: "C:\\Users\\Jordan\\Desktop\\myFlix_Client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 124
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Navbar, {
            bg: "dark",
            variant: "dark",
            fixed: "top",
            __source: {
                fileName: "C:\\Users\\Jordan\\Desktop\\myFlix_Client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 125
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Navbar.Brand, {
            __source: {
                fileName: "C:\\Users\\Jordan\\Desktop\\myFlix_Client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 126
            },
            __self: this
        }, "Welcome to MyFlix!"), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Link, {
            to: `/users/${user}`,
            __source: {
                fileName: "C:\\Users\\Jordan\\Desktop\\myFlix_Client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 127
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement(_buttonDefault.default, {
            variant: "link",
            className: "navbar-link text-light",
            __source: {
                fileName: "C:\\Users\\Jordan\\Desktop\\myFlix_Client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 128
            },
            __self: this
        }, "Profile")), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Link, {
            to: `/`,
            __source: {
                fileName: "C:\\Users\\Jordan\\Desktop\\myFlix_Client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 130
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement(_buttonDefault.default, {
            variant: "link",
            className: "navbar-link text-light",
            onClick: ()=>this.onLoggedOut()
            ,
            __source: {
                fileName: "C:\\Users\\Jordan\\Desktop\\myFlix_Client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 131
            },
            __self: this
        }, "Logout")))), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            exact: true,
            path: "/",
            render: ()=>{
                if (!user) return(/*#__PURE__*/ _reactDefault.default.createElement(_colDefault.default, null, /*#__PURE__*/ _reactDefault.default.createElement(_loginView.LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                return movies.map((m)=>/*#__PURE__*/ _reactDefault.default.createElement(_colDefault.default, {
                        md: 3,
                        key: m._id
                    }, /*#__PURE__*/ _reactDefault.default.createElement(_movieCard.MovieCard, {
                        movie: m
                    }))
                );
            },
            __source: {
                fileName: "C:\\Users\\Jordan\\Desktop\\myFlix_Client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 139
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/register",
            render: ()=>{
                if (user) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Redirect, {
                    to: "/"
                }));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_colDefault.default, null, /*#__PURE__*/ _reactDefault.default.createElement(_registrationView.RegistrationView, null)));
            },
            __source: {
                fileName: "C:\\Users\\Jordan\\Desktop\\myFlix_Client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 151
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/movies/:movieId",
            render: ({ match , history: history1  })=>{
                if (!user) return;
                if (movies.length === 0) return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
                    className: "main-view"
                }));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_colDefault.default, {
                    md: 8
                }, /*#__PURE__*/ _reactDefault.default.createElement(_movieView.MovieView, {
                    movie: movies.find((m)=>m._id === match.params.movieId
                    ),
                    onBackClick: ()=>history1.goBack()
                })));
            },
            __source: {
                fileName: "C:\\Users\\Jordan\\Desktop\\myFlix_Client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 159
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/movies/genre/:name",
            render: ({ match , history: history1  })=>{
                if (!user) return;
                if (movies.length === 0) return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
                    className: "main-view"
                }));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_colDefault.default, {
                    md: 8
                }, /*#__PURE__*/ _reactDefault.default.createElement(_genreView.GenreView, {
                    genre: movies.find((m)=>m.Genre.Name === match.params.name
                    ).Genre,
                    onBackClick: ()=>history1.goBack()
                })));
            },
            __source: {
                fileName: "C:\\Users\\Jordan\\Desktop\\myFlix_Client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 168
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/directors/:name",
            render: ({ match , history: history1  })=>{
                if (!user) return;
                if (movies.length === 0) return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
                    className: "main-view"
                }));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_colDefault.default, {
                    md: 8
                }, /*#__PURE__*/ _reactDefault.default.createElement(_directorView.DirectorView, {
                    director: movies.find((m)=>m.Director.Name === match.params.name
                    ).Director,
                    onBackClick: ()=>history1.goBack()
                })));
            },
            __source: {
                fileName: "C:\\Users\\Jordan\\Desktop\\myFlix_Client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 177
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/users/:username",
            render: ()=>{
                if (!user) return;
                return(/*#__PURE__*/ _reactDefault.default.createElement(_colDefault.default, null, /*#__PURE__*/ _reactDefault.default.createElement(_profileView.ProfileView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                    ,
                    movies: movies,
                    user: user,
                    onBackClick: ()=>history.goBack()
                })));
            },
            __source: {
                fileName: "C:\\Users\\Jordan\\Desktop\\myFlix_Client\\src\\components\\main-view\\main-view.jsx",
                lineNumber: 186
            },
            __self: this
        }))));
    }
}
exports.default = MainView;

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}